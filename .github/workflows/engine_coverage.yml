name: Engine Coverage check

on:
  # Triggers the workflow on pull request but only changes in the src/engine/ directory.
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
    paths:
      - 'src/engine/**'
      - '.github/workflows/engine_coverage.yml'

  workflow_dispatch:
    inputs:
      full_coverage:
        type: boolean
        description: 'Set to true to full coverage'
        required: false
        default: false
      exlude_modules:
        type: string
        description: 'Modules to exclude, separated by commas'
        required: false
        default: ""

# Ensures only one instance of this workflow is running per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  BUILD_PRESET: debug-coverage
  # Relative path from ${{github.workspace}}
  ENGINE_PATH: src/engine
  ENGINE_MODULES_DIR: source
  ENGINE_MODULES_PATH: src/engine/source
  BUILD_DIR: build
  BUILD_PATH: src/engine/build
  BUILD_MODULES_PATH: src/engine/build/source
  FULL_COVERAGE: ${{ inputs.full_coverage }}
  EXCLUDE_MODULES: ${{ inputs.exlude_modules || 'feedmanager' }}

jobs:
  build:
    name: Engine Coverage check

    # Runs only if the PR status is different to Draft
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
      with:
        ref: v2.0

    - name: Install dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: bc
        version: 1.0

    - name: Check out repository
      uses: actions/checkout@v4

    # - name: Cache CMake and ccache
    #   uses: hendrikmuhs/ccache-action@v1.2
    #   with:
    #     key: ${{ github.workflow }}-${{ runner.os }}

    - name: Get changed files
      if: ${{ !env.FULL_COVERAGE }}
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        dir_names: "true"
        diff_relative: "true"

    - name: Get the list of modules that have changed
      if: ${{ !env.FULL_COVERAGE }}
      env:
        ALL_MOD_DIR: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
      run: |
        # Check if there are any files that have changed
        if [ -z "$ALL_MOD_DIR" ]; then
          echo "No files have changed"
          exit 0
        fi

        # Filter if any folder under ${{env.ENGINE_MODULES_PATH}} has changed
        MODULES_LIST=() # Array to store the modules that have changed
        for module in $ALL_MOD_DIR; do
          if [[ $module == ${{env.ENGINE_MODULES_PATH}}* ]]; then
            # Get the module name
            module=${module#${{env.ENGINE_MODULES_PATH}}}
            module=${module#/}
            module=${module%%/*}

            # If empty, or is not a directory, skip
            if [ -z "$module" ] || [ ! -d "${{env.ENGINE_MODULES_PATH}}/${module}" ]; then
              continue
            fi

            # Add the module to the array
            MODULES_LIST+=($module)
            echo "Module $module has changed"
          fi
        done

        # Remove duplicates
        MODULES_LIST=($(echo "${MODULES_LIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        # Print and save the modules that have changed
        echo "MODULES_LIST=${MODULES_LIST[@]}" | tee -a $GITHUB_ENV

    - name: Get all modules (Only if full_coverage is set)
      if: ${{ env.FULL_COVERAGE }}
      run: |
        MODULES_LIST=()
        cd ${{env.ENGINE_MODULES_PATH}}
        for dir in $(ls -d */); do
          dir=${dir%*/}
          if [ -d "${dir}" ]; then
              MODULES_LIST+=("${dir}")
          fi
        done

        # Print and save the modules that have changed
        echo "MODULES_LIST=${MODULES_LIST[@]}" | tee -a $GITHUB_ENV

    - name: Exclude modules
      run: |
        # Get the list of modules to exclude
        EXCLUDE_MODULES=()
        if [ -n "${{ env.EXCLUDE_MODULES }}" ]; then
          IFS=',' read -r -a EXCLUDE_MODULES <<< "${{ env.EXCLUDE_MODULES }}"
        fi

        # Get the list of modules that have changed
        IFS=' ' read -r -a MODULES_LIST <<< "${MODULES_LIST[@]}"
        # Remove the modules to exclude
        for module in "${EXCLUDE_MODULES[@]}"; do
          echo "Excluding module $module"
          MODULES_LIST=(${MODULES_LIST[@]/$module})
        done

        # Print and save the modules that have changed
        echo "MODULES_LIST=${MODULES_LIST[@]}" | tee -a $GITHUB_ENV

    - name: Setup VCPKG
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{env.ENGINE_PATH}}/vcpkg'
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
        vcpkgJsonGlob: '${{env.ENGINE_PATH}}/vcpkg.json'

    - name: Configure CMake
      run: cmake --preset=${{env.BUILD_PRESET}} --no-warn-unused-cli -S ${{env.ENGINE_PATH}}

    - name: Build
      run: cmake --build ${{env.ENGINE_PATH}}/build --target all_tests -j$(nproc)

    - name: Coverage for changed modules
      run: |
        coverage_for_module() {
            local module=$1
            local coverage_report_dir="coverage_report_${module}" # Directory to store the coverage report

            local module_path="${{github.workspace}}/${{env.ENGINE_MODULES_PATH}}/${module}"
            local module_build_path="${{github.workspace}}/${{env.BUILD_MODULES_PATH}}/${module}"
            local coverage_base_file="${{github.workspace}}/${{env.BUILD_PATH}}/coverage_${module}_base.info"
            local coverage_after_file="${{github.workspace}}/${{env.BUILD_PATH}}/coverage_${module}_after.info"
            local coverage_total_file="${{github.workspace}}/${{env.BUILD_PATH}}/coverage_${module}_total.info"
            local coverage_filtered_file="${{github.workspace}}/${{env.BUILD_PATH}}/coverage_${module}_filtered.info"

            # Generate the coverage report
            lcov --capture --initial --directory ${module_build_path} --base-directory ${module_path} --output-file ${coverage_base_file} --ignore-errors mismatch
            ctest --test-dir ${module_build_path} -j
            lcov --capture --directory ${module_build_path} --base-directory ${module_path} --output-file $coverage_after_file --ignore-errors mismatch
            lcov --add-tracefile ${coverage_base_file} --add-tracefile $coverage_after_file --output-file ${coverage_total_file}
            lcov --remove ${coverage_total_file} '*/test/*' "*/${{env.BUILD_PATH}}/vcpkg_installed/*" --output-file ${coverage_filtered_file} --ignore-errors unused
            cd "${{github.workspace}}/${{env.BUILD_PATH}}"
            genhtml ${coverage_filtered_file} --output-directory ${coverage_report_dir} --prefix ${module_path}

            # Check if the coverage report was generated searching for the index.html file
            if [ -f "${coverage_report_dir}/index.html" ]; then
                echo "Coverage report for module ${module} generated in ${coverage_report_dir}"
            else
                echo "Error generating coverage report for module ${module}"
                exit 1
            fi

        }

        # Get the list of modules that have changed
        IFS=' ' read -r -a MODULES_LIST <<< "${MODULES_LIST[@]}"
        for module in "${MODULES_LIST[@]}"; do
            coverage_for_module $module
        done


    - name: Tar coverage reports
      run: |
        cd ${{github.workspace}}/${{env.BUILD_PATH}}
        tar_file="coverage_reports.tar.gz"

        # Check if each coverage report exists
        IFS=' ' read -r -a MODULES_LIST <<< "${MODULES_LIST[@]}"
        for module in "${MODULES_LIST[@]}"; do
          if [ ! -d "coverage_report_${module}" ]; then
            echo "Coverage report for module ${module} not found in '${{github.workspace}}/${{env.BUILD_PATH}}/coverage_report_${module}'"
            exit 1
          fi
        done

        echo "Creating tar file with coverage reports"
        # list all coverage reports and create a tar file
        echo "Coverage reports: $(ls coverage_report_*)"

        tar -vczf $tar_file coverage_report_*
        echo "COVERAGE_REPORTS=${tar_file}" | tee -a $GITHUB_ENV

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      id: upload-coverage-reports
      with:
        name: coverage-reports
        path: ${{github.workspace}}/${{env.BUILD_PATH}}/coverage_reports.tar.gz
        compression-level: 0
        retention-days: 1
        if-no-files-found: error

    - name: Verify coverage
      run: |
        # Message for the PR
        PR_COMMENT_COVERAGE='| Module | Line coverage | Function coverage |\n| --- | --- | --- |\n'

        # Get the list of modules that have changed
        IFS=' ' read -r -a MODULES_LIST <<< "${MODULES_LIST[@]}"

        verify_coverage_for_module() {
          local module=$1
          local min_coverage=80
          local coverage_filtered_file="${{github.workspace}}/${{env.BUILD_PATH}}/coverage_${module}_filtered.info"

          if [ ! -f "${coverage_filtered_file}" ]; then
              echo "Coverage report for module ${module} not found in ${coverage_filtered_file}"
              exit 1
          fi

          local summary=$(lcov --summary "${coverage_filtered_file}"")
          local line_coverage=$(echo "$summary" | grep 'lines' | awk '{print $2}' | sed 's/%//')
          local function_coverage=$(echo "$summary" | grep 'functions' | awk '{print $2}' | sed 's/%//')

          echo "Line coverage for module ${module}: ${line_coverage}"
          echo "Function coverage for module ${module}: ${function_coverage}"

          # Check Line coverage
          PR_COMMENT_COVERAGE+="| ${module} | ${line_coverage}% "
          if (( $(echo "$line_coverage < $min_coverage" | bc -l) )); then
              echo "Line coverage for module ${module} is below the minimum required: ${min_coverage}% (current: ${line_coverage}%)"
              PR_COMMENT_COVERAGE+=" :x:"
              # exit 1
          else
              echo "Line coverage for module ${module} is above the minimum required: ${min_coverage}% (current: ${line_coverage}%)"
              PR_COMMENT_COVERAGE+=" :white_check_mark:"
          fi

          # Check Function coverage
          PR_COMMENT_COVERAGE+=" | ${function_coverage}% "
          if (( $(echo "$function_coverage < $min_coverage" | bc -l) )); then
              echo "Function coverage for module ${module} is below the minimum required: ${min_coverage}% (current: ${function_coverage}%)"
              PR_COMMENT_COVERAGE+=" :x: |\n"
              # exit 1
          else
              echo "Function coverage for module ${module} is above the minimum required: ${min_coverage}% (current: ${function_coverage}%)"
              PR_COMMENT_COVERAGE+=" :white_check_mark: |\n"
          fi
        }

        for module in "${MODULES_LIST[@]}"; do
          verify_coverage_for_module $module
        done

        echo "PR_COMMENT_COVERAGE=${PR_COMMENT_COVERAGE}" | tee -a $GITHUB_ENV

    - name: Comment on PR
      uses: thollander/actions-comment-pull-request@v2
      if: github.event_name == 'pull_request'
      env:
        DOWNLOAD_URL: ${{ steps.upload-coverage-reports.outputs.artifact-url }}
        PR_COMMENT_COVERAGE: ${{ env.PR_COMMENT_COVERAGE }}
      with:
        message: |
          Coverage reports can be downloaded from [here]( ${{env.DOWNLOAD_URL}} )

          ${{env.PR_COMMENT_COVERAGE}}
